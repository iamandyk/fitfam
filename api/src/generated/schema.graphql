### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Bodyweight {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  weight: Float!
}

input BodyweightCreateInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
}

input BodyweightCreateManyWithoutBodyweightsInput {
  connect: [BodyweightWhereUniqueInput!]
  create: [BodyweightCreateWithoutUserInput!]
}

input BodyweightCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  weight: Float!
}

input BodyweightOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  updatedAt: OrderByArg
  weight: OrderByArg
}

input BodyweightWhereUniqueInput {
  id: ID
}

scalar DateTime

type Exercise {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input ExerciseCreateInput {
  createdAt: DateTime
  id: ID
  name: String!
  slug: String!
  updatedAt: DateTime
  workoutLogs: WorkoutLogCreateManyWithoutWorkoutLogsInput
}

input ExerciseCreateOneWithoutExerciseInput {
  connect: ExerciseWhereUniqueInput
  create: ExerciseCreateWithoutWorkoutLogsInput
}

input ExerciseCreateWithoutWorkoutLogsInput {
  createdAt: DateTime
  id: ID
  name: String!
  slug: String!
  updatedAt: DateTime
}

input ExerciseWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

type Mutation {
  createOneBodyweight(data: BodyweightCreateInput!): Bodyweight!
  createOneExercise(data: ExerciseCreateInput!): Exercise!
  createOneProfileSong(data: ProfileSongCreateInput!): ProfileSong!
  createOneWorkout(data: WorkoutCreateInput!): Workout!
  createOneWorkoutLog(data: WorkoutLogCreateInput!): WorkoutLog!
}

enum OrderByArg {
  asc
  desc
}

type ProfileSong {
  artist: String!
  createdAt: DateTime!
  id: ID!
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime!
  url: String!
  user: User!
}

input ProfileSongCreateInput {
  artist: String!
  createdAt: DateTime
  id: ID
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime
  url: String!
  user: UserCreateOneWithoutUserInput!
}

input ProfileSongCreateManyWithoutProfile_songsInput {
  connect: [ProfileSongWhereUniqueInput!]
  create: [ProfileSongCreateWithoutUserInput!]
}

input ProfileSongCreateWithoutUserInput {
  artist: String!
  createdAt: DateTime
  id: ID
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input ProfileSongOrderByInput {
  artist: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  provider: OrderByArg
  thumbnail: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  url: OrderByArg
}

input ProfileSongWhereUniqueInput {
  id: ID
}

type Query {
  bodyweight(where: BodyweightWhereUniqueInput!): Bodyweight
  bodyweights(after: ID, before: ID, first: Int, last: Int, orderBy: BodyweightOrderByInput, skip: Int): [Bodyweight!]!
  getLoggedInUser: User
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int): [User!]!
  workout(where: WorkoutWhereUniqueInput!): Workout
}

type User {
  bio: String!
  bodyweights(after: ID, before: ID, first: Int, last: Int, orderBy: BodyweightOrderByInput, skip: Int): [Bodyweight!]!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  picture: String!
  profile_songs(after: ID, before: ID, first: Int, last: Int, orderBy: ProfileSongOrderByInput, skip: Int): [ProfileSong!]!
  updatedAt: DateTime!
  username: String!
  workouts(after: ID, before: ID, first: Int, last: Int, orderBy: WorkoutOrderByInput, skip: Int): [Workout!]!
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWorkoutLogsInput
}

input UserCreateWithoutWorkoutLogsInput {
  bio: String!
  bodyweights: BodyweightCreateManyWithoutBodyweightsInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  picture: String!
  profile_songs: ProfileSongCreateManyWithoutProfile_songsInput
  updatedAt: DateTime
  username: String!
  workouts: WorkoutCreateManyWithoutWorkoutsInput
}

input UserOrderByInput {
  bio: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  picture: OrderByArg
  updatedAt: OrderByArg
  username: OrderByArg
}

input UserWhereUniqueInput {
  email: String
  id: ID
  username: String
}

type Workout {
  createdAt: DateTime!
  id: ID!
  logs(after: ID, before: ID, first: Int, last: Int, orderBy: WorkoutLogOrderByInput, skip: Int): [WorkoutLog!]!
  slug: String!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input WorkoutCreateInput {
  createdAt: DateTime
  id: ID
  logs: WorkoutLogCreateManyWithoutLogsInput
  slug: String!
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input WorkoutCreateManyWithoutWorkoutsInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutUserInput!]
}

input WorkoutCreateOneWithoutWorkoutInput {
  connect: WorkoutWhereUniqueInput
  create: WorkoutCreateWithoutLogsInput
}

input WorkoutCreateWithoutLogsInput {
  createdAt: DateTime
  id: ID
  slug: String!
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input WorkoutCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  logs: WorkoutLogCreateManyWithoutLogsInput
  slug: String!
  title: String!
  updatedAt: DateTime
}

type WorkoutLog {
  createdAt: DateTime!
  exercise: Exercise!
  id: ID!
  reps: Int!
  updatedAt: DateTime!
  user: User!
  weight: Float!
  workout: Workout!
}

input WorkoutLogCreateInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
  workout: WorkoutCreateOneWithoutWorkoutInput!
}

input WorkoutLogCreateManyWithoutLogsInput {
  connect: [WorkoutLogWhereUniqueInput!]
  create: [WorkoutLogCreateWithoutWorkoutInput!]
}

input WorkoutLogCreateManyWithoutWorkoutLogsInput {
  connect: [WorkoutLogWhereUniqueInput!]
  create: [WorkoutLogCreateWithoutUserInput!]
}

input WorkoutLogCreateWithoutUserInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  weight: Float!
  workout: WorkoutCreateOneWithoutWorkoutInput!
}

input WorkoutLogCreateWithoutWorkoutInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
}

input WorkoutLogOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  reps: OrderByArg
  updatedAt: OrderByArg
  weight: OrderByArg
}

input WorkoutLogWhereUniqueInput {
  id: ID
}

input WorkoutOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  slug: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input WorkoutWhereUniqueInput {
  id: ID
}
