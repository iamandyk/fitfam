### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Bodyweight {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  weight: Float!
}

input BodyweightCreateInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
}

input BodyweightCreateManyWithoutBodyweightsInput {
  connect: [BodyweightWhereUniqueInput!]
  create: [BodyweightCreateWithoutUserInput!]
}

input BodyweightCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  weight: Float!
}

input BodyweightFilter {
  every: BodyweightWhereInput
  none: BodyweightWhereInput
  some: BodyweightWhereInput
}

input BodyweightOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  updatedAt: OrderByArg
  weight: OrderByArg
}

input BodyweightWhereInput {
  AND: [BodyweightWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [BodyweightWhereInput!]
  OR: [BodyweightWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  weight: FloatFilter
}

input BodyweightWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Exercise {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input ExerciseCreateInput {
  createdAt: DateTime
  id: ID
  name: String!
  slug: String!
  updatedAt: DateTime
  workoutLogs: WorkoutLogCreateManyWithoutWorkoutLogsInput
}

input ExerciseCreateOneWithoutExerciseInput {
  connect: ExerciseWhereUniqueInput
  create: ExerciseCreateWithoutWorkoutLogsInput
}

input ExerciseCreateWithoutWorkoutLogsInput {
  createdAt: DateTime
  id: ID
  name: String!
  slug: String!
  updatedAt: DateTime
}

input ExerciseWhereInput {
  AND: [ExerciseWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  slug: StringFilter
  updatedAt: DateTimeFilter
  workoutLogs: WorkoutLogFilter
}

input ExerciseWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  addProfileSong(artist: String, provider: String, thumbnail: String, title: String, url: String): ProfileSong!
  createOneBodyweight(data: BodyweightCreateInput!): Bodyweight!
  createOneExercise(data: ExerciseCreateInput!): Exercise!
  createOneProfileSong(data: ProfileSongCreateInput!): ProfileSong!
  createOneSupplement(data: SupplementCreateInput!): Supplement!
  createOneWorkout(data: WorkoutCreateInput!): Workout!
  createOneWorkoutLog(data: WorkoutLogCreateInput!): WorkoutLog!
  editProfile(bio: String, instagram: String, picture: String): User!
  saveWorkout(input: SaveWorkoutInput): Workout!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Oembed {
  author_name: String
  author_url: String
  cache_age: String
  height: String
  html: String
  provider_name: String
  provider_url: String
  thumbnail_height: String
  thumbnail_url: String
  thumbnail_width: String
  title: String!
  type: String!
  version: String!
  width: String
}

enum OrderByArg {
  asc
  desc
}

scalar PresignedUploadURL

type ProfileSong {
  artist: String!
  createdAt: DateTime!
  id: ID!
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime!
  url: String!
  user: User!
}

input ProfileSongCreateInput {
  artist: String!
  createdAt: DateTime
  id: ID
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime
  url: String!
  user: UserCreateOneWithoutUserInput!
}

input ProfileSongCreateManyWithoutProfile_songsInput {
  connect: [ProfileSongWhereUniqueInput!]
  create: [ProfileSongCreateWithoutUserInput!]
}

input ProfileSongCreateWithoutUserInput {
  artist: String!
  createdAt: DateTime
  id: ID
  provider: String!
  thumbnail: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input ProfileSongFilter {
  every: ProfileSongWhereInput
  none: ProfileSongWhereInput
  some: ProfileSongWhereInput
}

input ProfileSongOrderByInput {
  artist: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  provider: OrderByArg
  thumbnail: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  url: OrderByArg
}

input ProfileSongWhereInput {
  AND: [ProfileSongWhereInput!]
  artist: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ProfileSongWhereInput!]
  OR: [ProfileSongWhereInput!]
  provider: StringFilter
  thumbnail: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  user: UserWhereInput
}

input ProfileSongWhereUniqueInput {
  id: ID
}

type Query {
  bodyweight(where: BodyweightWhereUniqueInput!): Bodyweight
  bodyweights(after: ID, before: ID, first: Int, last: Int, orderBy: BodyweightOrderByInput, skip: Int): [Bodyweight!]!
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  exercises(after: ID, before: ID, first: Int, last: Int, skip: Int, where: ExerciseWhereInput): [Exercise!]!
  getLoggedInUser: User
  getPresignedUploadUrl(directory: String): PresignedUploadURL!
  oembed(url: String): Oembed!
  onetrack(name: String): [Exercise!]!
  supplements(after: ID, before: ID, first: Int, last: Int, skip: Int): [Supplement!]!
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int): [User!]!
  workout(where: WorkoutWhereUniqueInput!): Workout
}

input SaveWorkoutInput {
  exercises: [WorkoutExerciseInput!]
  title: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Supplement {
  added_by: User!
  brand: String!
  createdAt: DateTime!
  id: ID!
  image_url: String!
  name: String!
  updatedAt: DateTime!
  url: String!
}

input SupplementCreateInput {
  added_by: UserCreateOneWithoutAdded_byInput!
  brand: String!
  createdAt: DateTime
  id: ID
  image_url: String!
  name: String!
  supplementStack: SupplementStackCreateOneWithoutSupplementStackInput
  updatedAt: DateTime
  url: String!
}

input SupplementCreateManyWithoutSupplementsInput {
  connect: [SupplementWhereUniqueInput!]
  create: [SupplementCreateWithoutAdded_byInput!]
}

input SupplementCreateWithoutAdded_byInput {
  brand: String!
  createdAt: DateTime
  id: ID
  image_url: String!
  name: String!
  supplementStack: SupplementStackCreateOneWithoutSupplementStackInput
  updatedAt: DateTime
  url: String!
}

input SupplementFilter {
  every: SupplementWhereInput
  none: SupplementWhereInput
  some: SupplementWhereInput
}

input SupplementStackCreateManyWithoutSupplementStacksInput {
  connect: [SupplementStackWhereUniqueInput!]
  create: [SupplementStackCreateWithoutUserInput!]
}

input SupplementStackCreateOneWithoutSupplementStackInput {
  connect: SupplementStackWhereUniqueInput
  create: SupplementStackCreateWithoutSupplementsInput
}

input SupplementStackCreateWithoutSupplementsInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input SupplementStackCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  supplements: SupplementCreateManyWithoutSupplementsInput
  updatedAt: DateTime
}

input SupplementStackFilter {
  every: SupplementStackWhereInput
  none: SupplementStackWhereInput
  some: SupplementStackWhereInput
}

input SupplementStackWhereInput {
  AND: [SupplementStackWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SupplementStackWhereInput!]
  OR: [SupplementStackWhereInput!]
  supplements: SupplementFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input SupplementStackWhereUniqueInput {
  id: ID
}

input SupplementWhereInput {
  added_by: UserWhereInput
  AND: [SupplementWhereInput!]
  brand: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  image_url: StringFilter
  name: StringFilter
  NOT: [SupplementWhereInput!]
  OR: [SupplementWhereInput!]
  supplementStack: SupplementStackWhereInput
  updatedAt: DateTimeFilter
  url: StringFilter
}

input SupplementWhereUniqueInput {
  id: ID
}

type User {
  bio: String
  bodyweights(after: ID, before: ID, first: Int, last: Int, orderBy: BodyweightOrderByInput, skip: Int): [Bodyweight!]!
  createdAt: DateTime!
  dateOfBirth: DateTime
  email: String!
  height: String
  id: ID!
  instagram: String
  name: String!
  picture: String!
  profile_songs(after: ID, before: ID, first: Int, last: Int, orderBy: ProfileSongOrderByInput, skip: Int): [ProfileSong!]!
  updatedAt: DateTime!
  username: String!
  workouts(after: ID, before: ID, first: Int, last: Int, orderBy: WorkoutOrderByInput, skip: Int): [Workout!]!
}

input UserCreateOneWithoutAdded_byInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSupplementsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWorkoutLogsInput
}

input UserCreateWithoutSupplementsInput {
  bio: String
  bodyweights: BodyweightCreateManyWithoutBodyweightsInput
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String!
  height: String
  id: ID
  instagram: String
  name: String!
  picture: String!
  profile_songs: ProfileSongCreateManyWithoutProfile_songsInput
  supplementStacks: SupplementStackCreateManyWithoutSupplementStacksInput
  updatedAt: DateTime
  username: String!
  workoutLogs: WorkoutLogCreateManyWithoutWorkoutLogsInput
  workouts: WorkoutCreateManyWithoutWorkoutsInput
}

input UserCreateWithoutWorkoutLogsInput {
  bio: String
  bodyweights: BodyweightCreateManyWithoutBodyweightsInput
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String!
  height: String
  id: ID
  instagram: String
  name: String!
  picture: String!
  profile_songs: ProfileSongCreateManyWithoutProfile_songsInput
  supplements: SupplementCreateManyWithoutSupplementsInput
  supplementStacks: SupplementStackCreateManyWithoutSupplementStacksInput
  updatedAt: DateTime
  username: String!
  workouts: WorkoutCreateManyWithoutWorkoutsInput
}

input UserOrderByInput {
  bio: OrderByArg
  createdAt: OrderByArg
  dateOfBirth: OrderByArg
  email: OrderByArg
  height: OrderByArg
  id: OrderByArg
  instagram: OrderByArg
  name: OrderByArg
  picture: OrderByArg
  updatedAt: OrderByArg
  username: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  bio: NullableStringFilter
  bodyweights: BodyweightFilter
  createdAt: DateTimeFilter
  dateOfBirth: NullableDateTimeFilter
  email: StringFilter
  height: NullableStringFilter
  id: StringFilter
  instagram: NullableStringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  picture: StringFilter
  profile_songs: ProfileSongFilter
  supplements: SupplementFilter
  supplementStacks: SupplementStackFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  workoutLogs: WorkoutLogFilter
  workouts: WorkoutFilter
}

input UserWhereUniqueInput {
  email: String
  id: ID
  username: String
}

type Workout {
  createdAt: DateTime!
  id: ID!
  logs(after: ID, before: ID, first: Int, last: Int, orderBy: WorkoutLogOrderByInput, skip: Int): [WorkoutLog!]!
  slug: String!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input WorkoutCreateInput {
  createdAt: DateTime
  id: ID
  logs: WorkoutLogCreateManyWithoutLogsInput
  slug: String!
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input WorkoutCreateManyWithoutWorkoutsInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutUserInput!]
}

input WorkoutCreateOneWithoutWorkoutInput {
  connect: WorkoutWhereUniqueInput
  create: WorkoutCreateWithoutLogsInput
}

input WorkoutCreateWithoutLogsInput {
  createdAt: DateTime
  id: ID
  slug: String!
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input WorkoutCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  logs: WorkoutLogCreateManyWithoutLogsInput
  slug: String!
  title: String!
  updatedAt: DateTime
}

input WorkoutExerciseInput {
  reps: Int
  weight: Float
}

input WorkoutFilter {
  every: WorkoutWhereInput
  none: WorkoutWhereInput
  some: WorkoutWhereInput
}

type WorkoutLog {
  createdAt: DateTime!
  exercise: Exercise!
  id: ID!
  reps: Int!
  updatedAt: DateTime!
  user: User!
  weight: Float!
  workout: Workout!
}

input WorkoutLogCreateInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
  workout: WorkoutCreateOneWithoutWorkoutInput!
}

input WorkoutLogCreateManyWithoutLogsInput {
  connect: [WorkoutLogWhereUniqueInput!]
  create: [WorkoutLogCreateWithoutWorkoutInput!]
}

input WorkoutLogCreateManyWithoutWorkoutLogsInput {
  connect: [WorkoutLogWhereUniqueInput!]
  create: [WorkoutLogCreateWithoutUserInput!]
}

input WorkoutLogCreateWithoutUserInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  weight: Float!
  workout: WorkoutCreateOneWithoutWorkoutInput!
}

input WorkoutLogCreateWithoutWorkoutInput {
  createdAt: DateTime
  exercise: ExerciseCreateOneWithoutExerciseInput!
  id: ID
  reps: Int!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weight: Float!
}

input WorkoutLogFilter {
  every: WorkoutLogWhereInput
  none: WorkoutLogWhereInput
  some: WorkoutLogWhereInput
}

input WorkoutLogOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  reps: OrderByArg
  updatedAt: OrderByArg
  weight: OrderByArg
}

input WorkoutLogWhereInput {
  AND: [WorkoutLogWhereInput!]
  createdAt: DateTimeFilter
  exercise: ExerciseWhereInput
  id: StringFilter
  NOT: [WorkoutLogWhereInput!]
  OR: [WorkoutLogWhereInput!]
  reps: IntFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  weight: FloatFilter
  workout: WorkoutWhereInput
}

input WorkoutLogWhereUniqueInput {
  id: ID
}

input WorkoutOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  slug: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  logs: WorkoutLogFilter
  NOT: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  slug: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input WorkoutWhereUniqueInput {
  id: ID
}
