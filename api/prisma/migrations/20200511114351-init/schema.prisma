datasource db {
  provider = "mysql"
  url = "***"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
}

model User {
  id               String            @default(cuid()) @id
  email            String            @unique
  name             String
  username         String            @unique
  picture          String
  bio              String?
  workouts         Workout[]
  bodyweights      Bodyweight[]
  profile_songs    ProfileSong[]
  supplement_stack SupplementStack[]
  instagram        String?
  dateOfBirth      DateTime?
  height           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  WorkoutLog       WorkoutLog[]
  Supplement       Supplement[]
}

model Workout {
  id        String       @default(cuid()) @id
  title     String
  slug      String
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @map("user")
  logs      WorkoutLog[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model WorkoutLog {
  id         String   @default(cuid()) @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String   @map("exercise")
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  String   @map("workout")
  reps       Int
  weight     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Exercise {
  id         String       @default(cuid()) @id
  name       String       @unique
  slug       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  WorkoutLog WorkoutLog[]
}

model Bodyweight {
  id        String   @default(cuid()) @id
  weight    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileSong {
  id        String   @default(cuid()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user")
  thumbnail String
  url       String
  title     String
  artist    String
  provider  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplement {
  id                String           @default(cuid()) @id
  name              String
  url               String
  image_url         String
  brand             String
  added_by          User             @relation(fields: [addedById], references: [id])
  addedById         String           @map("added_by")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  SupplementStack   SupplementStack? @relation(fields: [supplementStackId], references: [id])
  supplementStackId String?
}

model SupplementStack {
  id          String       @default(cuid()) @id
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @map("user")
  supplements Supplement[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}